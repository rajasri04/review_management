c
guide(current_user)
current_user
c
@project.staff_id
@project
c
project_params
Project
c
@message.student_id
@message.students
@message.student
@message
c
params[:student_id]
params
arams
@message
student_id
c
params
c
@student
 @progress
c
 @progress = Progress.where("student_id == ?", id)
c
@progress
c
cc
c
@progress
@student.cont
@progress.count
@progress.methods
@progress.count
  end
     rev0_marks
     rev0_marks = @progress.sum("review0")/provided
     provided = @progress.where(review0: nil).count
     total=@progress.count
     @progress = Progress.find_by_student_id(current_student)
def rev0
current_student
c
@student.reg_no
@student.name
@student
c
params.permit(:name,:description,:email,:panel_id)
params.require(:project).permit(:student_id,:name,:description,:email,:panel_id)
params[:group_id]
project_params
c
d.name
d=@student.group
@student.group
@student
c
@student.group
@student
c
params
c
d.group.methods
d.group.empty
d.group.empty?
d.group.present?
d.group.present
d=Student.find(params[:student_id])
Student.find(params[:student_id])
Student.find(student_id)
s=Student.find(student_id)
id
c
params[:group]
c
params[:name]
params[:group]
params
c
name+"jja"
params
c
params
params[:friend]
current_student
c
current_student
c
panel(current_user)
c
current_user.panel
panel(current_user)
c
panel(current_user)
c
@staff
panel(@staff)
panel(current_user)
c
@abstract.update(final_approval: true) 
current_user.admin?
c
cc
c
cc
c
@students
c
Student.all
@students
c
@abstracts
c
s.save
s.approved=true
s.approved_by = current_user.name
s=Abstract.find(params[:id])
Abstract.find(params[:id])
params[:id]
params
@abstract
c
@accept
c
abstract
@abstract
current_user
@staff
c
current_student
current_Student
c
@abstract.project
@abstract
@student
c
params
c
file
c
field_details
c
file
c
file
project_name
field_details
c
d.receiver
d.sender
d=Student.find(params[:student_id])
Student.find(params[:student_id])
Student.find(student_id)
Student.find(id)
current_student.message
current_student.messages
current_student.message
c
content.present?
c
@message
c
JSON.parse(content).dig("meta","project_des") if content!=nil
content
@message.new_record?
@message
c
field_details
c
g
field_details[:content] = field_details[:content].to_json
field_details
c
@message
c
field_details[:content] = field_details[:content].to_json
JSON.parse(p)
CGI.unescape(p)
CGI.unescapeHTML(p)
p=e.to_json
e.to_json
e=field_details[:content]
field_details
c
@message
